package com.example.livecomm.ui

import android.view.Display
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.compose.ui.Alignment
import androidx.compose.ui.graphics.asImageBitmap
// import androidx.compose.ui.platform.LocalContext
import com.google.zxing.BarcodeFormat
import com.journeyapps.barcodescanner.BarcodeEncoder
import androidx.activity.compose.BackHandler
import java.net.ServerSocket
import java.net.Socket
import kotlinx.coroutines.withContext
import kotlinx.coroutines.Dispatchers

@Composable
fun TxScreen(
    ip: String,
    port: Int,
    userName: String,
    onBack: () -> Unit,
    pairedDeviceName: String,
    onClose: () -> Unit,
    onConnected: (String) -> Unit
) {
    BackHandler {
        onBack()
    }

    // val context = LocalContext.current
    val qrContent = "$ip:$port" // Or use JSON for more info
    val qrBitmap = remember(qrContent) {
        try {
            val barcodeEncoder = BarcodeEncoder()
            barcodeEncoder.encodeBitmap(qrContent, BarcodeFormat.QR_CODE, 400, 400)
        } catch (e: Exception) {
            null
        }
    }

    var streaming by remember { mutableStateOf(false) }

    var connectionStatus by remember { mutableStateOf("Waiting for receiver...") }
    // val coroutineScope = rememberCoroutineScope()

    // Server socket state
    var serverSocket by remember { mutableStateOf<ServerSocket?>(null) }
    var clientSocket by remember { mutableStateOf<Socket?>(null) }

    // Start server when streaming starts
    LaunchedEffect(streaming) {
        // Print to Logcat for debugging
        println("111111111111111111111111111111111111111111111111111111111111111111111")
        println(streaming)
        if (streaming) {
            println("222222222222222222222222222222222222222222222222222222222222222222222222")
            withContext(Dispatchers.IO) {
                println("333333333333333333333333333333333333333333333333333333333333333333333333333")
                try {
                    println("4444444444444444444444444444444444444444444444444444444444444444444444444")
                    val server = ServerSocket(port)
                    serverSocket = server
                    println("555555555555555555555555555555555555555555555555555555555555555555555555555")

                    val client = server.accept()
                    clientSocket = client
                    // Print to Logcat for debugging
                    println("666666666666666666666666666666666666666666666666666666666666666666666666666")

                    // Send your user name
                    client.getOutputStream().write((userName + "\n").toByteArray())
                    client.getOutputStream().flush()

                    // Read the other device's user name
                    val otherDeviceName = client.getInputStream().bufferedReader().readLine()

                    withContext(Dispatchers.Main) {
                        connectionStatus = "Receiver connected!"
                        onConnected(otherDeviceName)
                    }
                } catch (e: Exception) {
                    withContext(Dispatchers.Main) {
                        connectionStatus = "Error: ${e.message}"
                    }
                    // Print to Logcat for debugging
                    println("Rx connection error: ${e.message}")
                    // Android Log:
                    // Log.e("RxScreen", "Connection error", e)
                }
            }
        } else {
            // Clean up sockets
            clientSocket?.close()
            serverSocket?.close()
            clientSocket = null
            serverSocket = null
            connectionStatus = "Waiting for receiver..."
        }
    }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(32.dp),
        verticalArrangement = Arrangement.Top
    ) {
        Text(
            text = "Welcome $userName!!",
            style = MaterialTheme.typography.titleLarge,
            modifier = Modifier.align(Alignment.Start)
        )
        Spacer(modifier = Modifier.height(16.dp))
        Text("Connected to device: $pairedDeviceName")

        Spacer(modifier = Modifier.height(16.dp))
        Text("Scan this QR code on the receiver device to connect:")

        Spacer(modifier = Modifier.height(8.dp))
        qrBitmap?.let {
            Image(
                bitmap = it.asImageBitmap(),
                contentDescription = "QR Code",
                modifier = Modifier
                    .size(200.dp)
                    .align(Alignment.CenterHorizontally)
            )
        }

        Spacer(modifier = Modifier.height(16.dp))
        Text("Status: $connectionStatus")

        Spacer(modifier = Modifier.height(24.dp))
        if (!streaming) {
            Button(onClick = { streaming = true }, modifier = Modifier.fillMaxWidth()) {
                Text("Start Tx")
            }
        } else {
            Text("VIDEO STREAMING...")
            Spacer(modifier = Modifier.height(16.dp))
            Button(onClick = { streaming = false }, modifier = Modifier.fillMaxWidth()) {
                Text("STOP")
            }
        }
        Spacer(modifier = Modifier.height(16.dp))
        Button(onClick = onClose, modifier = Modifier.fillMaxWidth()) {
            Text("Close App")
        }
    }
}
